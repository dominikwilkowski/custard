"use strict";var Chalk=require("chalk"),Fs=require("fs"),Custard=function(){return{QUEUE:0,DEBUG:!1,run:function(a,b){Custard.QUEUE++,a.forEach(function(a){if("function"!=typeof a.run)return void Custard.debugging("The run bit of your sequenze must be a function! It is instead: "+typeof a.run,"error");if("number"!=typeof a.maxCalls){if("undefined"!=typeof a.maxCalls)return void Custard.debugging("The maxCalls bit of your sequenze must be an integer! It is instead: "+typeof a.maxCalls,"error");a.maxCalls=0}Custard.QUEUE<a.maxCalls||0===a.maxCalls?(Custard.debugging("Calling "+a.run.name+" and a QUEUE: "+Custard.QUEUE,"report"),a.run()):(Custard.debugging("STUFF IS BEING SACRIFICED!!!","failsafe"),"function"==typeof b&&b())})},finished:function(){return Custard.QUEUE--,Custard.debugging("Current queue: "+Custard.QUEUE),Custard.QUEUE<1&&Custard.debugging("I got no other tasks running","finished"),Custard.get()},get:function(){return Custard.QUEUE},debugging:function(a,b){if("headline"===b&&Custard.DEBUG){new CFonts({text:a,colors:["white","gray"],maxLength:12})}"report"===b?Custard.DEBUG&&console.log(Chalk.bgWhite("\n"+Chalk.bold.green(" ☑  ")+Chalk.black("Custard: "+a+" "))):"error"===b?console.log(Chalk.bgWhite("\n"+Chalk.red(" ☒  ")+Chalk.black("Custard: "+a+" "))):"finished"===b?Custard.DEBUG&&console.log(Chalk.bgGreen("\n"+Chalk.bold.cyan(" ↜  ")+Chalk.black("Custard: "+a+" "))):"failsafe"===b&&Custard.DEBUG&&console.log(Chalk.bgYellow("\n"+Chalk.bold.cyan(" ☒  ")+Chalk.black("Custard: "+a+" ")))}}}();module.exports=Custard;var Chalk=require("chalk"),Fs=require("fs"),Custard=function(){return{QUEUE:0,DEBUG:!1,run:function(a,b){Custard.QUEUE++,a.forEach(function(a){if("function"!=typeof a.run)return void Custard.debugging("The run bit of your sequenze must be a function! It is instead: "+typeof a.run,"error");if("number"!=typeof a.maxCalls){if("undefined"!=typeof a.maxCalls)return void Custard.debugging("The maxCalls bit of your sequenze must be an integer! It is instead: "+typeof a.maxCalls,"error");a.maxCalls=0}Custard.QUEUE<a.maxCalls||0===a.maxCalls?(Custard.debugging("Calling "+a.run.name+" and a QUEUE: "+Custard.QUEUE,"report"),a.run()):(Custard.debugging("STUFF IS BEING SACRIFICED!!!","failsafe"),"function"==typeof b&&b())})},finished:function(){return Custard.QUEUE--,Custard.debugging("Current queue: "+Custard.QUEUE),Custard.QUEUE<1&&Custard.debugging("I got no other tasks running","finished"),Custard.get()},get:function(){return Custard.QUEUE},debugging:function(a,b){"headline"===b&&Custard.DEBUG&&new CFonts({text:a,colors:["white","gray"],maxLength:12}),"report"===b?Custard.DEBUG&&console.log(Chalk.bgWhite("\n"+Chalk.bold.green(" ☑  ")+Chalk.black("Custard: "+a+" "))):"error"===b?console.log(Chalk.bgWhite("\n"+Chalk.red(" ☒  ")+Chalk.black("Custard: "+a+" "))):"finished"===b?Custard.DEBUG&&console.log(Chalk.bgGreen("\n"+Chalk.bold.cyan(" ↜  ")+Chalk.black("Custard: "+a+" "))):"failsafe"===b&&Custard.DEBUG&&console.log(Chalk.bgYellow("\n"+Chalk.bold.cyan(" ☒  ")+Chalk.black("Custard: "+a+" ")))}}}();module.exports=Custard;var Chalk=require("chalk"),Fs=require("fs"),Custard=function(){return{QUEUE:0,DEBUG:!1,run:function(a,b){Custard.QUEUE++,a.forEach(function(a){if("function"!=typeof a.run)return void Custard.debugging("The run bit of your sequenze must be a function! It is instead: "+typeof a.run,"error");if("number"!=typeof a.maxCalls){if("undefined"!=typeof a.maxCalls)return void Custard.debugging("The maxCalls bit of your sequenze must be an integer! It is instead: "+typeof a.maxCalls,"error");a.maxCalls=0}Custard.QUEUE<a.maxCalls||0===a.maxCalls?(Custard.debugging("Calling "+a.run.name+" and a QUEUE: "+Custard.QUEUE,"report"),a.run()):(Custard.debugging("STUFF IS BEING SACRIFICED!!!","failsafe"),"function"==typeof b&&b())})},finished:function(){return Custard.QUEUE--,Custard.debugging("Current queue: "+Custard.QUEUE),Custard.QUEUE<1&&Custard.debugging("I got no other tasks running","finished"),Custard.get()},get:function(){return Custard.QUEUE},debugging:function(a,b){"headline"===b&&Custard.DEBUG&&new CFonts({text:a,colors:["white","gray"],maxLength:12}),"report"===b?Custard.DEBUG&&console.log(Chalk.bgWhite("\n"+Chalk.bold.green(" ☑  ")+Chalk.black("Custard: "+a+" "))):"error"===b?console.log(Chalk.bgWhite("\n"+Chalk.red(" ☒  ")+Chalk.black("Custard: "+a+" "))):"finished"===b?Custard.DEBUG&&console.log(Chalk.bgGreen("\n"+Chalk.bold.cyan(" ↜  ")+Chalk.black("Custard: "+a+" "))):"failsafe"===b&&Custard.DEBUG&&console.log(Chalk.bgYellow("\n"+Chalk.bold.cyan(" ☒  ")+Chalk.black("Custard: "+a+" ")))}}}();module.exports=Custard;var Chalk=require("chalk"),Fs=require("fs"),Custard=function(){return{QUEUE:0,DEBUG:!1,run:function(a,b){Custard.QUEUE++,a.forEach(function(a){if("function"!=typeof a.run)return void Custard.debugging("The run bit of your sequenze must be a function! It is instead: "+typeof a.run,"error");if("number"!=typeof a.maxCalls){if("undefined"!=typeof a.maxCalls)return void Custard.debugging("The maxCalls bit of your sequenze must be an integer! It is instead: "+typeof a.maxCalls,"error");a.maxCalls=0}Custard.QUEUE<a.maxCalls||0===a.maxCalls?(Custard.debugging("Calling "+a.run.name+" and a QUEUE: "+Custard.QUEUE,"report"),a.run()):(Custard.debugging("STUFF IS BEING SACRIFICED!!!","failsafe"),"function"==typeof b&&b())})},finished:function(){return Custard.QUEUE--,Custard.debugging("Current queue: "+Custard.QUEUE),Custard.QUEUE<1&&Custard.debugging("I got no other tasks running","finished"),Custard.get()},get:function(){return Custard.QUEUE},debugging:function(a,b){"headline"===b&&Custard.DEBUG&&new CFonts({text:a,colors:["white","gray"],maxLength:12}),"report"===b?Custard.DEBUG&&console.log(Chalk.bgWhite("\n"+Chalk.bold.green(" ☑  ")+Chalk.black("Custard: "+a+" "))):"error"===b?console.log(Chalk.bgWhite("\n"+Chalk.red(" ☒  ")+Chalk.black("Custard: "+a+" "))):"finished"===b?Custard.DEBUG&&console.log(Chalk.bgGreen("\n"+Chalk.bold.cyan(" ↜  ")+Chalk.black("Custard: "+a+" "))):"failsafe"===b&&Custard.DEBUG&&console.log(Chalk.bgYellow("\n"+Chalk.bold.cyan(" ☒  ")+Chalk.black("Custard: "+a+" ")))}}}();module.exports=Custard;